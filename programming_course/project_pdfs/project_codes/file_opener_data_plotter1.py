import numpy as npfile_dir = '/Users/shaique/Desktop/BioInf_IMP/BioInf_SS_2024/programming_course/project_pdfs/91_sample_txt.txt'data = dict()with open(file_dir, 'rt') as ftext:    lines = ftext.readlines()    lines = [i.strip('\n') for i in lines]# Helper functions to find ranges and get elements in rangesdef find_non_hash_ranges(strings):    ranges = []    start_index = None    for i, string in enumerate(strings):        if not string.startswith('#'):            if start_index is None:                start_index = i        else:            if start_index is not None:                ranges.append((start_index, i - 1))                start_index = None    if start_index is not None:        ranges.append((start_index, len(strings) - 1))    return rangesdef get_elements_in_ranges(strings):    ranges = find_non_hash_ranges(strings)    elements_in_ranges = []    for start, end in ranges:        elements_in_ranges.append(strings[start:end + 1])    return elements_in_ranges# Extract index, iIndex, and jIndex valuesindex_indices = [index for index, string in enumerate(lines) if '# index: ' in string]index_values = [lines[i].split(': ')[1] for i in index_indices]iIndex_indices = [index for index, string in enumerate(lines) if '# iIndex: ' in string]iIndex_values = [lines[i].split(': ')[1] for i in iIndex_indices]jIndex_indices = [index for index, string in enumerate(lines) if '# jIndex: ' in string]jIndex_values = [lines[i].split(': ')[1] for i in jIndex_indices]# Extract the data series pattern (assumes alternating 0, 1 pattern)data_series_pattern = [0, 1] * int(len(iIndex_indices) / 2)# Get the elements in the ranges where data points are locatedelements_in_ranges = get_elements_in_ranges(lines)# Process and structure data into the dictionaryfor s, (i_val, j_val, data_range) in enumerate(zip(iIndex_values, jIndex_values, elements_in_ranges)):    i = int(i_val)    j = int(j_val)        # Extract distances (d) and forces (f) from the data range    distances = []    forces = []        for data_point in data_range:        elements = data_point.split()        if len(elements) >= 2:  # Ensure there are at least 2 elements to unpack            distance, force = map(float, elements[:2])            distances.append(distance)            forces.append(force)        d = np.array(distances)    f = np.array(forces)        # Assign to the dictionary    data[(data_series_pattern[s], i, j)] = (d, f)# Example usage to print the dictionary contentsfor key, value in data.items():    print(f"{key}: distances = {value[0]}, forces = {value[1]}")